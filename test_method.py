import numpy as np
from triangle import get_A

"""
#westmin
v1 = (1262, 485, 1)
#v2 = (-4884, 579, 1)
v2 = (-4884, 500, 1)
v3 = (995, 11635, 1)

#london eye
v1 = (861, 577, 1)
v2 = (9355, 659, 1)
v3 = (932, -3634, 1)


A = get_A(v1, v2, v3)
U, S, Vh = np.linalg.svd(A)
w_le = Vh[3, :].T

W_le = [ [w_le[0], 0, w_le[1]],
        [0, w_le[0], w_le[2]],
        [w_le[1], w_le[2], w_le[3]] ]
W_le = np.matrix(W_le, dtype='float')
chol = np.linalg.cholesky(W_le)
inv = np.linalg.inv(chol)
print((inv/inv[2, 2]).astype(int).T)
"""

E = [[-0.00151932,  0.03928261,  0.00275188],
[ 0.02545672,  0.69272528, -0.71036584],
[-0.03743761,  0.70817254,  0.1955514 ]]

#from hw
"""E = [[-2.607e-3, 2.860e-1, 3.624e-2],
[1.488e-1, 2.286e-4, -1.666],
[3.54e-3, 1.687, 1.914e-3]]"""

W = [[0, -1, 0], 
        [1, 0, 0],
        [0, 0, 1]]

Z = [[0, 1, 0], 
        [-1, 0, 0],
        [0, 0, 0]]


U, S, Vh = np.linalg.svd(E)
S = [0.8, 0.8, 0] #averaged out the singular values
T = U @ W @ np.diag(S) @ U.T
R = U @ np.linalg.inv(W) @ Vh

print("singular values:")
print(S)
print("T and R")
print(T)
print(R)
#print(T @ R)
print("T using alternative formula: ")
print(U @ Z @ U.T) #This also appears to work











"""
K (intrinsic) results:

LE: 
[[503, 0, 891],
[0, 503, 516],
[0, 0,  1]]

Westmin
[[1303, 0, 968],
[0, 1303, 640], 
[0, 0, 1]]

======================

F Result (From epipolar)
 [[-2.31812116e-09  5.99360180e-08 -3.06441768e-05]
 [ 3.88409687e-08  1.05693587e-06 -2.12629514e-03]
 [-4.67083540e-05 -5.52880086e-05  1.00000000e+00]]

======================
E = (K1.T) @ F @ (K2) 
[[-0.00151932,  0.03928261,  0.00275188],
[ 0.02545672,  0.69272528, -0.71036584],
[-0.03743761,  0.70817254,  0.1955514 ]]

other one:
[[-1.51931747e-03,  3.92826056e-02, -2.32277662e-03],
 [ 2.54567205e-02,  6.92725282e-01, -2.01484053e+00],
 [-1.21193199e-02,  3.41622014e-01, -6.15090628e-02]]

=====================

E = SVD = U S Vh

T = U @ W @ S @ U.T:
[[-5.49559715e-04, -4.33658946e-02, -3.43133254e-03],
[ 3.48100315e-02,  2.09674061e-01,  7.05269765e-01],
[-1.84652096e-02, -9.69170867e-01, -2.09124501e-01]]

R = U @ W-1 @ Vh:
[[ 0.99840658,  0.05089797,  0.02436572],
[ 0.05607953, -0.84693534, -0.52873019],
[-0.00627511,  0.52925412, -0.84844016]]

"""

